/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 avatar_prototype.glb -t 
*/
"use client";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import React, { type JSX, useEffect } from "react";
import type * as THREE from "three";
import { type GLTF, SkeletonUtils } from "three/examples/jsm/Addons.js";

type ActionName = "Waving_Mixamo";

interface GLTFAction extends THREE.AnimationClip {
	name: ActionName;
}

type GLTFResult = GLTF & {
	nodes: {
		Body_1: THREE.SkinnedMesh;
		Body_2: THREE.SkinnedMesh;
		Body_3: THREE.SkinnedMesh;
		Body_4: THREE.SkinnedMesh;
		Tops: THREE.SkinnedMesh;
		Bottoms: THREE.SkinnedMesh;
		Hair: THREE.SkinnedMesh;
		mixamorigHips: THREE.Bone;
	};
	materials: {
		Body: THREE.MeshStandardMaterial;
		Face: THREE.MeshStandardMaterial;
		Eye: THREE.MeshStandardMaterial;
		"Eye brow": THREE.MeshStandardMaterial;
		shirts: THREE.MeshStandardMaterial;
		buttoms: THREE.MeshStandardMaterial;
		"マテリアル.004": THREE.MeshStandardMaterial;
	};
	animations: GLTFAction[];
};

export function AvatarPrototype(props: JSX.IntrinsicElements["group"]) {
	const group = React.useRef<THREE.Group>(null);
	const { scene, animations } = useGLTF("/avatar_prototype.glb");
	const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
	const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;
	const { actions } = useAnimations(animations, group);

	useEffect(() => {
		const Waving_Mixamo = actions.Waving_Mixamo;
		if (Waving_Mixamo) {
			Waving_Mixamo.play();
		}
		return () => {
			Waving_Mixamo?.stop();
		};
	}, [actions]);

	const rotationSpeed = React.useMemo(() => 1, []);

	useFrame((_state, delta) => {
		if (group.current) {
			group.current.rotation.y += delta * rotationSpeed;
		}
	});

	return (
		<group ref={group} {...props} dispose={null}>
			<group name="Scene">
				<group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
					<primitive object={nodes.mixamorigHips} />
					<group name="Body">
						<skinnedMesh
							name="Body_1"
							geometry={nodes.Body_1.geometry}
							material={materials.Body}
							skeleton={nodes.Body_1.skeleton}
						/>
						<skinnedMesh
							name="Body_2"
							geometry={nodes.Body_2.geometry}
							material={materials.Face}
							skeleton={nodes.Body_2.skeleton}
						/>
						<skinnedMesh
							name="Body_3"
							geometry={nodes.Body_3.geometry}
							material={materials.Eye}
							skeleton={nodes.Body_3.skeleton}
						/>
						<skinnedMesh
							name="Body_4"
							geometry={nodes.Body_4.geometry}
							material={materials["Eye brow"]}
							skeleton={nodes.Body_4.skeleton}
						/>
					</group>
				</group>
				<skinnedMesh
					name="Tops"
					geometry={nodes.Tops.geometry}
					material={materials.shirts}
					skeleton={nodes.Tops.skeleton}
				/>
				<skinnedMesh
					name="Bottoms"
					geometry={nodes.Bottoms.geometry}
					material={materials.buttoms}
					skeleton={nodes.Bottoms.skeleton}
				/>
				<skinnedMesh
					name="Hair"
					geometry={nodes.Hair.geometry}
					material={materials["マテリアル.004"]}
					skeleton={nodes.Hair.skeleton}
				/>
			</group>
		</group>
	);
}

useGLTF.preload("/avatar_prototype.glb");
